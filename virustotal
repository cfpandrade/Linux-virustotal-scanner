#!/bin/bash
# Author: Carlos Andrade
# Description: Script to scan files or hashes with VirusTotal and display the results in a user-friendly, centered format.

if [ -z "$1" ]; then
  echo "Provide a file path or hash."
  exit 1
fi

API_KEY="API_KEY"
FILE=""
HASH=""
TMPFILE=$(mktemp)

if [ -f "$1" ]; then
  FILE="$1"
else
  HASH="$1"
fi

spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\'
  while kill -0 $pid 2>/dev/null; do
    local temp=${spinstr#?}
    printf "\rProcessing... [%c] " "$spinstr"
    spinstr=$temp${spinstr%"$temp"}
    sleep $delay
  done
  printf "\rProcessing... [Done]    \n"
}

animate_print() {
  local text="$1"
  for ((i = 0; i < ${#text}; i++)); do
    echo -n "${text:$i:1}"
    sleep 0.05
  done
  echo
}

center_text_block() {
  # Center all lines in a block relative to the longest line
  local lines=("$@")
  local term_width=$(tput cols)
  local max_width=0

  # Find the maximum line length
  for line in "${lines[@]}"; do
    local line_width=${#line}
    if (( line_width > max_width )); then
      max_width=$line_width
    fi
  done

  # Center each line based on the longest line
  for line in "${lines[@]}"; do
    local line_width=${#line}
    local spaces=$(( (term_width - max_width) / 2 ))
    printf "%*s%s\n" "$spaces" "" "$line"
  done
}

fetch_response() {
  if [ -n "$FILE" ]; then
    curl -s -f -X POST -H "x-apikey: $API_KEY" -F "file=@$FILE" "https://www.virustotal.com/api/v3/files"
  else
    curl -s -f -H "x-apikey: $API_KEY" "https://www.virustotal.com/api/v3/files/$HASH"
  fi
}

poll_analysis() {
  local analysis_id="$1"
  while true; do
    response=$(curl -s -H "x-apikey: $API_KEY" "https://www.virustotal.com/api/v3/analyses/$analysis_id")
    status=$(echo "$response" | jq -r '.data.attributes.status')
    if [ "$status" == "completed" ]; then
      echo "$response"
      return
    fi
    printf "\rWaiting for analysis to complete... "
    sleep 2
  done
}

clear
animate_print "Starting VirusTotal Scan..."
fetch_response > "$TMPFILE" &
fetch_pid=$!
spinner $fetch_pid
wait $fetch_pid

RESPONSE=$(cat "$TMPFILE")
rm "$TMPFILE"

# Extract analysis_id
analysis_id=$(echo "$RESPONSE" | jq -r '.data.id // empty')

# Check if analysis_id is missing
if [ -z "$analysis_id" ]; then
  dtype=$(echo "$RESPONSE" | jq -r '.data.type // empty')
  if [ "$dtype" = "file" ]; then
    known_hash=$(echo "$RESPONSE" | jq -r '.data.id // empty')
    if [ -n "$known_hash" ]; then
      analysis_id=$(curl -s -H "x-apikey: $API_KEY" "https://www.virustotal.com/api/v3/files/$known_hash" | jq -r '.data.last_analysis_id // empty')
    fi
  fi
fi

if [ -z "$analysis_id" ]; then
  echo "Error: Failed to retrieve analysis ID."
  exit 1
fi

ANALYSIS_RESPONSE=$(poll_analysis "$analysis_id")

# Extract metrics
malicious=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.malicious // 0')
unsupported=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats["type-unsupported"] // 0')
undetected=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.undetected // 0')
harmless=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.harmless // 0')
suspicious=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.suspicious // 0')
confirmed_timeout=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats["confirmed-timeout"] // 0')
timeout=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.timeout // 0')
failure=$(echo "$ANALYSIS_RESPONSE" | jq -r '.data.attributes.stats.failure // 0')

clear
if [ "$malicious" -gt 0 ]; then
  c=$(tput setaf 1)
  nc=$(tput sgr0)
  echo -e "\a"
  center_text_block \
    "${c}           ***************************************${nc}" \
    "${c}           *** ALERT: Malicious file detected! ***${nc}" \
    "${c}           ***************************************${nc}"
  echo
  center_text_block \
    "|--------------------|--------------|" \
    "| Status             | Count        |" \
    "|--------------------|--------------|" \
    "$(printf "| %-18s | %-12s |" "Malicious" "$malicious")" \
    "$(printf "| %-18s | %-12s |" "Unsupported" "$unsupported")" \
    "$(printf "| %-18s | %-12s |" "Suspicious" "$suspicious")" \
    "$(printf "| %-18s | %-12s |" "Confirmed Timeout" "$confirmed_timeout")" \
    "$(printf "| %-18s | %-12s |" "Timeout" "$timeout")" \
    "$(printf "| %-18s | %-12s |" "Error" "$failure")" \
    "$(printf "| %-18s | %-12s |" "Harmless" "$harmless")" \
    "$(printf "| %-18s | %-12s |" "Undetected" "$undetected")" \
    "|--------------------|--------------|" \
    "${c}Script by: Carlos Andrade${nc}"
else
  c=$(tput setaf 2)
  nc=$(tput sgr0)
  center_text_block \
    "*****************************" \
    "${c}* The file or hash is clean *${nc}" \
    "*****************************" \
    "${c}Script by: Carlos Andrade${nc}"    
fi